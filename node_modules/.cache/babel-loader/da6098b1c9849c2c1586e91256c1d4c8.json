{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\yoyo2\\\\SolidityProjects\\\\eth_swap\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\yoyo2\\\\SolidityProjects\\\\eth_swap\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:\\\\Users\\\\yoyo2\\\\SolidityProjects\\\\eth_swap\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\yoyo2\\\\SolidityProjects\\\\eth_swap\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\yoyo2\\\\SolidityProjects\\\\eth_swap\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"C:\\\\Users\\\\yoyo2\\\\SolidityProjects\\\\eth_swap\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"C:\\\\Users\\\\yoyo2\\\\SolidityProjects\\\\eth_swap\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\yoyo2\\\\SolidityProjects\\\\eth_swap\\\\src\\\\components\\\\App.js\";\n\n/* eslint-disable jsx-a11y/anchor-has-content */\nimport React, { Component } from \"react\";\nimport Web3 from \"web3\";\nimport EthSwap from \"../abis/EthSwap.json\";\nimport Token from \"../abis/Token.json\";\nimport Navbar from \"./Navbar\";\nimport Main from \"./Main\";\nimport \"./App.css\";\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  _createClass(App, [{\n    key: \"componentWillMount\",\n    value: function () {\n      var _componentWillMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.loadWeb3();\n\n              case 2:\n                _context.next = 4;\n                return this.loadBlockchainData();\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentWillMount() {\n        return _componentWillMount.apply(this, arguments);\n      }\n\n      return componentWillMount;\n    }()\n  }, {\n    key: \"loadBlockchainData\",\n    value: function () {\n      var _loadBlockchainData = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        var web3, accounts, ethBalance, networkId, tokenData, token, tokenBalance, ethSwapData, ethSwap;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                web3 = window.web3;\n                ;\n                _context2.next = 4;\n                return web3.eth.getAccounts();\n\n              case 4:\n                accounts = _context2.sent;\n                ;\n                this.setState({\n                  account: accounts[0]\n                });\n                _context2.next = 9;\n                return web3.eth.getBalance(this.state.account);\n\n              case 9:\n                ethBalance = _context2.sent;\n                this.setState({\n                  ethBalance: ethBalance\n                }); // load Token\n\n                _context2.next = 13;\n                return web3.eth.net.getId();\n\n              case 13:\n                networkId = _context2.sent;\n                tokenData = Token.networks[networkId];\n\n                if (!tokenData) {\n                  _context2.next = 24;\n                  break;\n                }\n\n                token = new web3.eth.Contract(Token.abi, tokenData.address);\n                this.setState({\n                  token: token\n                });\n                _context2.next = 20;\n                return token.methods.balanceOf(this.state.account).call();\n\n              case 20:\n                tokenBalance = _context2.sent;\n                this.setState({\n                  tokenBalance: tokenBalance.toString()\n                });\n                _context2.next = 25;\n                break;\n\n              case 24:\n                window.alert(\"Token contract not deployed to detected network\");\n\n              case 25:\n                // load EthSwap\n                ethSwapData = EthSwap.networks[networkId];\n\n                if (ethSwapData) {\n                  ethSwap = new web3.eth.Contract(EthSwap.abi, ethSwapData.address);\n                  this.setState({\n                    ethSwap: ethSwap\n                  });\n                } else {\n                  window.alert(\"EthSwap contract not deployed to detected network\");\n                }\n\n                this.setState({\n                  loading: false\n                });\n\n              case 28:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function loadBlockchainData() {\n        return _loadBlockchainData.apply(this, arguments);\n      }\n\n      return loadBlockchainData;\n    }()\n  }, {\n    key: \"loadWeb3\",\n    value: function () {\n      var _loadWeb = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (!window.ethereum) {\n                  _context3.next = 6;\n                  break;\n                }\n\n                window.web3 = new Web3(window.ethereum);\n                _context3.next = 4;\n                return window.ethereum.enable();\n\n              case 4:\n                _context3.next = 7;\n                break;\n\n              case 6:\n                if (window.web3) {\n                  window.web3 = new Web3(window.web3.currentProvider);\n                } else {\n                  window.alert(\"Non-ethereum browser detected. you should consider trying Metamask!\");\n                }\n\n              case 7:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function loadWeb3() {\n        return _loadWeb.apply(this, arguments);\n      }\n\n      return loadWeb3;\n    }()\n  }]);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n\n    _this.buyTokens = function (etherAmount) {\n      _this.state.ethSwap.methods.buyTokens().send({\n        value: etherValue,\n        from: _this.state.account\n      });\n    };\n\n    _this.state = {\n      account: \"\",\n      token: {},\n      ethSwap: {},\n      ethBalance: \"0\",\n      tokenBalance: \"0\",\n      loading: true\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      var content;\n\n      if (this.state.loading) {\n        content = React.createElement(\"p\", {\n          id: \"loader\",\n          className: \"text-center\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 80\n          },\n          __self: this\n        }, \"Loading...\");\n      } else {\n        content = React.createElement(Main, {\n          ethBalance: this.state.ethBalance,\n          tokenBalance: this.state.tokenBalance,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 83\n          },\n          __self: this\n        });\n      }\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, React.createElement(Navbar, {\n        account: this.state.account,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"container-fluid mt-5\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, React.createElement(\"main\", {\n        role: \"main\",\n        className: \"col-lg-12 ml-auto mr-auto\",\n        style: {\n          maxWidth: \"600px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"content mr-auto ml-auto\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, React.createElement(\"a\", {\n        href: \"http://www.dappuniversity.com/bootcamp\",\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }), content)))));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["C:\\Users\\yoyo2\\SolidityProjects\\eth_swap\\src\\components\\App.js"],"names":["React","Component","Web3","EthSwap","Token","Navbar","Main","App","loadWeb3","loadBlockchainData","web3","window","eth","getAccounts","accounts","setState","account","getBalance","state","ethBalance","net","getId","networkId","tokenData","networks","token","Contract","abi","address","methods","balanceOf","call","tokenBalance","toString","alert","ethSwapData","ethSwap","loading","ethereum","enable","currentProvider","props","buyTokens","etherAmount","send","value","etherValue","from","content","maxWidth"],"mappings":"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","sourcesContent":["/* eslint-disable jsx-a11y/anchor-has-content */\r\nimport React, { Component } from \"react\";\r\nimport Web3 from \"web3\";\r\nimport EthSwap from \"../abis/EthSwap.json\"; \r\nimport Token from \"../abis/Token.json\"\r\nimport Navbar from \"./Navbar\";\r\nimport Main from \"./Main\"\r\n\r\nimport \"./App.css\";\r\n\r\nclass App extends Component {\r\n  async componentWillMount() {\r\n    await this.loadWeb3();\r\n    await this.loadBlockchainData();\r\n  }\r\n\r\n  async loadBlockchainData()  {\r\n    const web3 = window.web3;;\r\n\r\n    const accounts = await web3.eth.getAccounts();;\r\n    this.setState({account:accounts[0]})\r\n\r\n    const ethBalance= await web3.eth.getBalance(this.state.account)\r\n    this.setState({ethBalance})\r\n    \r\n    // load Token\r\n    const networkId= await web3.eth.net.getId()\r\n    const tokenData = Token.networks[networkId]\r\n    if(tokenData){\r\n      const token = new web3.eth.Contract(Token.abi, tokenData.address);\r\n      this.setState({token})\r\n      let tokenBalance = await token.methods.balanceOf(this.state.account).call()\r\n      this.setState({tokenBalance: tokenBalance.toString()}) \r\n    }else{\r\n      window.alert(\"Token contract not deployed to detected network\")\r\n    }\r\n    // load EthSwap\r\n    const ethSwapData = EthSwap.networks[networkId]\r\n    if(ethSwapData){\r\n      const ethSwap = new web3.eth.Contract(EthSwap.abi, ethSwapData.address);\r\n      this.setState({ethSwap})\r\n    }else{\r\n      window.alert(\"EthSwap contract not deployed to detected network\")\r\n    }\r\n    this.setState({loading:false})\r\n  }\r\n\r\n  async loadWeb3() {\r\n    if (window.ethereum) {\r\n      window.web3 = new Web3(window.ethereum);\r\n      await window.ethereum.enable();\r\n    } else if (window.web3) {\r\n      window.web3 = new Web3(window.web3.currentProvider);\r\n    } else {\r\n      window.alert(\r\n        \"Non-ethereum browser detected. you should consider trying Metamask!\"\r\n      );\r\n    }\r\n  }\r\n\r\n  buyTokens = (etherAmount)=>{\r\n    this.state.ethSwap.methods.buyTokens().send({value:etherValue,from:this.state.account})\r\n  }\r\n\r\n  constructor(props){\r\n    super(props);\r\n    this.state={\r\n      account:\"\",\r\n      token : {},\r\n      ethSwap:{},\r\n      ethBalance:\"0\",\r\n      tokenBalance:\"0\",\r\n      loading: true\r\n    };\r\n  }\r\n\r\n  render() {\r\n    let content\r\n    if(this.state.loading){\r\n      content = <p id=\"loader\" className=\"text-center\">Loading...</p>\r\n    }else{\r\n      content = (\r\n        <Main\r\n          ethBalance={this.state.ethBalance}\r\n          tokenBalance={this.state.tokenBalance}\r\n        />\r\n      );\r\n    }\r\n    return (\r\n      <div>\r\n        <Navbar account={this.state.account}  />\r\n        <div className=\"container-fluid mt-5\">\r\n          <div className=\"row\">\r\n            <main\r\n              role=\"main\"\r\n              className=\"col-lg-12 ml-auto mr-auto\"\r\n              style={{ maxWidth: \"600px\" }}\r\n            >\r\n              <div className=\"content mr-auto ml-auto\">\r\n                <a\r\n                  href=\"http://www.dappuniversity.com/bootcamp\"\r\n                  target=\"_blank\"\r\n                  rel=\"noopener noreferrer\"\r\n                ></a>\r\n                {content}\r\n              </div>\r\n            </main>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}