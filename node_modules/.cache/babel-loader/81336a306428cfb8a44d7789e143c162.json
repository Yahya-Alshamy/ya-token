{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\yoyo2\\\\SolidityProjects\\\\eth_swap\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\yoyo2\\\\SolidityProjects\\\\eth_swap\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:\\\\Users\\\\yoyo2\\\\SolidityProjects\\\\eth_swap\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\yoyo2\\\\SolidityProjects\\\\eth_swap\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\yoyo2\\\\SolidityProjects\\\\eth_swap\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"C:\\\\Users\\\\yoyo2\\\\SolidityProjects\\\\eth_swap\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"C:\\\\Users\\\\yoyo2\\\\SolidityProjects\\\\eth_swap\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\yoyo2\\\\SolidityProjects\\\\eth_swap\\\\src\\\\components\\\\App.js\";\n\n/* eslint-disable jsx-a11y/anchor-has-content */\nimport React, { Component } from \"react\";\nimport Web3 from \"web3\";\nimport EthSwap from \"../abis/EthSwap.json\";\nimport Token from \"../abis/Token.json\";\nimport Navbar from \"./Navbar\";\nimport \"./App.css\";\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  _createClass(App, [{\n    key: \"componentWillMount\",\n    value: function () {\n      var _componentWillMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.loadWeb3();\n\n              case 2:\n                _context.next = 4;\n                return this.loadBlockchainData();\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentWillMount() {\n        return _componentWillMount.apply(this, arguments);\n      }\n\n      return componentWillMount;\n    }()\n  }, {\n    key: \"loadBlockchainData\",\n    value: function () {\n      var _loadBlockchainData = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        var web3, accounts, ethBalance, abi, networkId, tokenData, address, token;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                web3 = window.web3;\n                ;\n                _context2.next = 4;\n                return web3.eth.getAccounts();\n\n              case 4:\n                accounts = _context2.sent;\n                ;\n                this.setState({\n                  account: accounts[0]\n                });\n                _context2.next = 9;\n                return web3.eth.getBalance(this.state.account);\n\n              case 9:\n                ethBalance = _context2.sent;\n                this.setState({\n                  ethBalance: ethBalance\n                });\n                abi = Token.abi;\n                _context2.next = 14;\n                return web3.eth.net.getId();\n\n              case 14:\n                networkId = _context2.sent;\n                tokenData = Token.networks[networkId];\n\n                if (tokenData) {\n                  address = tokenData.address;\n                  token = new web3.eth.Contract(abi, address);\n                  console.log(token);\n                } else {}\n\n              case 17:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function loadBlockchainData() {\n        return _loadBlockchainData.apply(this, arguments);\n      }\n\n      return loadBlockchainData;\n    }()\n  }, {\n    key: \"loadWeb3\",\n    value: function () {\n      var _loadWeb = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (!window.ethereum) {\n                  _context3.next = 6;\n                  break;\n                }\n\n                window.web3 = new Web3(window.ethereum);\n                _context3.next = 4;\n                return window.ethereum.enable();\n\n              case 4:\n                _context3.next = 7;\n                break;\n\n              case 6:\n                if (window.web3) {\n                  window.web3 = new Web3(window.web3.currentProvider);\n                } else {\n                  window.alert(\"Non-ethereum browser detected. you should consider trying Metamask!\");\n                }\n\n              case 7:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function loadWeb3() {\n        return _loadWeb.apply(this, arguments);\n      }\n\n      return loadWeb3;\n    }()\n  }]);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.state = {\n      account: \"\",\n      ethSwap: [],\n      ethBalance: \"0\"\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, React.createElement(Navbar, {\n        account: this.state.account,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"container-fluid mt-5\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, React.createElement(\"main\", {\n        role: \"main\",\n        className: \"col-lg-12 d-flex text-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"content mr-auto ml-auto\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, React.createElement(\"a\", {\n        href: \"http://www.dappuniversity.com/bootcamp\",\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }), React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, \"Hello, World!\"))))));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["C:\\Users\\yoyo2\\SolidityProjects\\eth_swap\\src\\components\\App.js"],"names":["React","Component","Web3","EthSwap","Token","Navbar","App","loadWeb3","loadBlockchainData","web3","window","eth","getAccounts","accounts","setState","account","getBalance","state","ethBalance","abi","net","getId","networkId","tokenData","networks","address","token","Contract","console","log","ethereum","enable","currentProvider","alert","props","ethSwap"],"mappings":"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","sourcesContent":["/* eslint-disable jsx-a11y/anchor-has-content */\r\nimport React, { Component } from \"react\";\r\nimport Web3 from \"web3\";\r\nimport EthSwap from \"../abis/EthSwap.json\"; \r\nimport Token from \"../abis/Token.json\"\r\nimport Navbar from \"./Navbar\";\r\n\r\nimport \"./App.css\";\r\n\r\nclass App extends Component {\r\n  async componentWillMount() {\r\n    await this.loadWeb3();\r\n    await this.loadBlockchainData();\r\n  }\r\n\r\n  async loadBlockchainData()  {\r\n    const web3 = window.web3;;\r\n\r\n    const accounts = await web3.eth.getAccounts();;\r\n    this.setState({account:accounts[0]})\r\n\r\n    const ethBalance= await web3.eth.getBalance(this.state.account)\r\n    this.setState({ethBalance})\r\n    const abi = Token.abi\r\n    const networkId= await web3.eth.net.getId()\r\n    const tokenData = Token.networks[networkId]\r\n    if(tokenData){\r\n      const address = tokenData.address;\r\n      const token = new web3.eth.Contract(abi, address);\r\n      console.log(token);\r\n    }else{\r\n\r\n    }\r\n    \r\n  }\r\n\r\n  async loadWeb3() {\r\n    if (window.ethereum) {\r\n      window.web3 = new Web3(window.ethereum);\r\n      await window.ethereum.enable();\r\n    } else if (window.web3) {\r\n      window.web3 = new Web3(window.web3.currentProvider);\r\n    } else {\r\n      window.alert(\r\n        \"Non-ethereum browser detected. you should consider trying Metamask!\"\r\n      );\r\n    }\r\n  }\r\n\r\n  constructor(props){\r\n    super(props);\r\n    this.state={\r\n      account:\"\",\r\n      ethSwap:[],\r\n      ethBalance:\"0\",\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Navbar account={this.state.account}/>\r\n        <div className=\"container-fluid mt-5\">\r\n          <div className=\"row\">\r\n            <main role=\"main\" className=\"col-lg-12 d-flex text-center\">\r\n              <div className=\"content mr-auto ml-auto\">\r\n                <a\r\n                  href=\"http://www.dappuniversity.com/bootcamp\"\r\n                  target=\"_blank\"\r\n                  rel=\"noopener noreferrer\"\r\n                ></a>\r\n                <h1>Hello, World!</h1>\r\n              </div>\r\n            </main>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}